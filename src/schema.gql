# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum ACTION_SCOPE {
  ALL_OTHER_RECORD_SPACES
  JUST_THIS_RECORD_SPACE
}

input AddressInput {
  city: String!
  country: String!
  number: String!
  street: String!
}

input AuthCheckInput {
  token: String!
}

type AuthCheckResponse {
  expired: Boolean!
}

enum AuthOptionsScope {
  DELETE
  FIND
  INSERT
  UPDATE
}

type AuthResponse {
  token: String
}

input BusinessDetails {
  address: String
  name: String
}

type BusinessDetailsOutput {
  address: String
  name: String
}

input CreateFieldsInput {
  """Slug of project"""
  projectSlug: String!

  """Slug of Record Space"""
  recordSpaceSlug: String!

  """Field Structure"""
  recordStructure: [RecordStructureInput!]!
}

input CreateProjectInput {
  description: String!
  name: String!
  slug: String!
}

input CreateRecordInput {
  """Content of Fields"""
  fieldsContent: [RecordFieldContentInput!]!

  """Project Slug"""
  projectSlug: String!

  """Record Space Slug"""
  recordSpaceSlug: String!
}

input CreateRecordSpaceInput {
  """Space Authentication Options"""
  authOptions: RecordSpaceAuthOptionsInput

  """description of record space"""
  description: String

  """Name of Record Space"""
  name: String!

  """Project Slug of Record Space"""
  projectSlug: String!

  """Structure of record"""
  recordStructure: [RecordStructureInput!]!

  """Slug of Record Space"""
  slug: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Endpoint {
  body: [RecordStructureObject!]
  example: String!
  method: HTTPMethods!
  params: [RecordStructureObject!]
  path: String!
}

input GetRecordsInput {
  """Project Slug"""
  projectSlug: String!

  """Record Space Slug"""
  recordSpaceSlug: String!
}

input GetUserInput {
  id: String!
}

enum HTTPMethods {
  GET
  POST
}

enum Interests {
  ART_AND_CULTURE
  BEAUTY_AND_FASHION
  BUSINESS_AND_SOCIAL_INNOVATION
  DEVELOPMENT_AND_IMPACT
  ENTREPRENEURSHIP
  ENVIRONMENT_SUSTAINABILITY
  GENDER_EQUALITY
  HEALTH_AND_WELLBEING
  MONEY_AND_WEALTH_BUILDING
  PROFESSIONAL_DEVELOPMENT
}

input Keys {
  postmark: Postmark
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addAdminToRecordSpace(actionScope: ACTION_SCOPE!, id: String!, userId: String!): RecordSpace!
  createFields(createFieldsInput: CreateFieldsInput!): RecordSpace!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createRecord(createRecordInput: CreateRecordInput!): Record!
  createRecordSpace(createRecordSpaceInput: CreateRecordSpaceInput!): RecordSpace!
  register(registerUserInput: RegisterUserInput!): User!
  removeProject(id: String!, slug: String!): Project!
  removeRecordSpace(projectSlug: String!, slug: String!): Boolean!
  sendNotificationsToAllUsers(sendNotificationsInput: SendNotificationsInput!): Boolean!
  toggleDeveloperMode(actionScope: ACTION_SCOPE!, enable: Boolean!, id: String!): RecordSpace!
  update(updateUserInput: UpdateUserInput!): User!
  updateProject(updateProjectInput: UpdateProjectInput): Project!
  updateRecordSpace(updateRecordSpaceInput: UpdateRecordSpaceInput!): RecordSpace!
  updateRecords(updateRecordsInput: UpdateRecordInput!): [Record!]!
  uploadProfileImage(file: Upload!): User!
}

input Postmark {
  """Postmark API Key"""
  apiKey: String!

  """Postmark Sender Email"""
  senderEmail: String!
}

type PostmarkOutput {
  apiKey: String!
  senderEmail: String!
}

type Project {
  businessDetails: BusinessDetailsOutput
  description: String!
  id: String!
  keys: ProjectKeysOutput
  name: String!
  siteUrl: String
  slug: String!
  user: String!
}

input ProjectFilter {
  description: String
  id: String
  name: String
  slug: String
  userId: String
}

type ProjectKeysOutput {
  postmark: PostmarkOutput
}

type Query {
  authCheck(authCheckInput: AuthCheckInput!): AuthCheckResponse!
  getCurrentUser: User!
  getEternalToken(authCheckInput: AuthCheckInput!): AuthResponse!
  getUser(getUserInput: GetUserInput!): User!
  getUsers: [User!]!
  login(loginInput: LoginInput!): AuthResponse!
  project(filter: ProjectFilter): Project
  projects(filter: ProjectFilter): [Project!]!
  recordSpace(recordSpaceFilter: RecordSpaceFilter!): RecordSpace!
  recordSpaces(recordSpaceFilter: RecordSpaceFilter!): [RecordSpace!]!
  records(getRecordsInput: GetRecordsInput!): [Record!]!
}

type Record {
  """Date Record was created"""
  createdAt: DateTime!

  """Record Field Content """
  fieldsContent: [RecordFieldContentOutput!]!

  """Record ID"""
  id: String!

  """RecordSpace for Records """
  recordSpace: String!

  """Date Record was updated"""
  updatedAt: DateTime!

  """User that created Record"""
  user: String!
}

type RecordField {
  description: String
  id: String!
  name: String!
  required: Boolean!
  slug: String!
  type: String!
}

input RecordFieldContentInput {
  field: String!
  numberContent: String
  textContent: String
}

type RecordFieldContentOutput {
  field: RecordField!
  numberContent: Float
  textContent: String
}

type RecordSpace {
  """Users with Record Space"""
  admins: [String!]

  """description of record space"""
  description: String!

  """Determines if user can access endpoints"""
  developerMode: Boolean!
  endpoints: [Endpoint!]!

  """Record Space Field Ids"""
  fieldIds: [String!]!

  """Record Space Fields"""
  fields: [RecordField!]!

  """Record Space Id"""
  id: String!

  """Name of Record Space"""
  name: String!

  """Project of Record Space"""
  project: String!

  """Structure of record"""
  recordStructure: [RecordStructureObject!]!

  """Slug of Record Space"""
  slug: String!

  """User who created Record Space"""
  user: String!
}

input RecordSpaceAuthOptionsInput {
  active: Boolean!
  scope: [AuthOptionsScope!]!
  space: String!
  token: String!
}

input RecordSpaceFilter {
  """description of record space"""
  description: String

  """Id of Record Space"""
  id: String

  """Name of Record Space"""
  name: String

  """Slug of Project"""
  projectSlug: String!

  """Slug of Record Space"""
  slug: String
}

input RecordStructureInput {
  description: String = ""
  hashed: Boolean = false
  name: String!
  required: Boolean = false
  slug: String!
  type: RecordStructureType!
  unique: Boolean = false
}

type RecordStructureObject {
  description: String
  hashed: Boolean
  name: String!
  required: Boolean
  slug: String!
  type: RecordStructureType!
  unique: Boolean
}

enum RecordStructureType {
  NUMBER
  TEXT
}

input RegisterUserInput {
  email: String!
  firstName: String!
  gender: UserGender!
  lastName: String!
  password: String!
}

input SendNotificationsInput {
  message: String!
  title: String!
}

input UpdateProjectInput {
  businessDetails: BusinessDetails
  description: String
  id: String
  keys: Keys
  name: String
  siteUrl: String
  slug: String
}

input UpdateRecordInput {
  """Content of Fields"""
  fieldsContent: [RecordFieldContentInput!]!
  id: String!
}

input UpdateRecordSpaceInput {
  """description of record space"""
  description: String

  """Name of Record Space"""
  name: String

  """Slug of project"""
  projectSlug: String
  slug: String!
}

input UpdateUserInput {
  FCMToken: String
  address: AddressInput

  """Object Id of User"""
  id: String!
  industry: String
  interests: [Interests!]
  organization: String
  password: String
  role: UserRoles
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: String!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  profileImage: String
}

enum UserGender {
  female
  male
}

enum UserRoles {
  ADMIN
  OWNER
  USER
}